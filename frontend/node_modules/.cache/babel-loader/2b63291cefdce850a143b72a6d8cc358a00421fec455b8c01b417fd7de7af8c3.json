{"ast":null,"code":"var _jsxFileName = \"/home/coga/Desktop/pass/frontend/src/FileUpload.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// function FileUpload() {\n//   const [fileInput1, setFileInput1] = useState(null);\n//   const [fileInput2, setFileInput2] = useState(null);\n//   const [filenames, setFilenames] = useState([]);\n\n//   const handleFileChange1 = (event) => {\n//     setFileInput1(event.target.files);\n//   };\n\n//   const handleFileChange2 = (event) => {\n//     setFileInput2(event.target.files);\n//   };\n\n//   const handleUpload = async () => {\n//     const formData = new FormData();\n//     for (let i = 0; i < fileInput1.length; i++) {\n//       formData.append(\"files1\", fileInput1[i]);\n//     }\n\n//     for (let i = 0; i < fileInput2.length; i++) {\n//       formData.append(\"files2\", fileInput2[i]);\n//     }\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/upload', formData); \n//       const responseData = response.data\n\n//       setFilenames([responseData.file1_name, responseData.file2_name]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input type=\"file\" multiple onChange={handleFileChange1} />\n//       <input type=\"file\" multiple onChange={handleFileChange2} />\n//       <button onClick={handleUpload}>Upload</button>\n//       <ul>\n//         {filenames.map((filename, index) => (\n//           <li key={index}>{filename}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default FileUpload;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport subprocess from 'child_process';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FileUpload() {\n  _s();\n  const [fileInput1, setFileInput1] = useState(null);\n  const [fileInput2, setFileInput2] = useState(null);\n  const [filenames, setFilenames] = useState([]);\n  const [identical, setIdentical] = useState(\"\");\n  const handleFileChange1 = event => {\n    setFileInput1(event.target.files);\n  };\n  const handleFileChange2 = event => {\n    setFileInput2(event.target.files);\n  };\n  const handleUpload = async () => {\n    const formData = new FormData();\n    for (let i = 0; i < fileInput1.length; i++) {\n      formData.append(\"files1\", fileInput1[i]);\n    }\n    for (let i = 0; i < fileInput2.length; i++) {\n      formData.append(\"files2\", fileInput2[i]);\n    }\n    try {\n      const response = await axios.post('http://localhost:5000/api/upload', formData);\n      const responseData = response.data;\n      setFilenames([responseData.file1_name, responseData.file2_name]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    if (filenames.length === 2) {\n      const [file1, file2] = filenames;\n      const result = subprocess.execSync(`cksum ${file1} ${file2}`).toString();\n      const [file1Checksum, file2Checksum] = result.split(\"\\n\").map(line => line.split(\" \")[0]);\n      if (file1Checksum === file2Checksum) {\n        setIdentical(\"Files are identical\");\n      } else {\n        setIdentical(\"Files are not identical\");\n      }\n    }\n  }, [filenames]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleFileChange1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      onChange: handleFileChange2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filenames.map((filename, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: filename\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), identical && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: identical\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(FileUpload, \"L56Y7fHNRUzJL1niTCU9JSFlHvc=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","useEffect","axios","subprocess","FileUpload","fileInput1","setFileInput1","fileInput2","setFileInput2","filenames","setFilenames","identical","setIdentical","handleFileChange1","event","target","files","handleFileChange2","handleUpload","formData","FormData","i","length","append","response","post","responseData","data","file1_name","file2_name","error","console","file1","file2","result","execSync","toString","file1Checksum","file2Checksum","split","map","line","filename","index"],"sources":["/home/coga/Desktop/pass/frontend/src/FileUpload.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import axios from \"axios\";\n\n// function FileUpload() {\n//   const [fileInput1, setFileInput1] = useState(null);\n//   const [fileInput2, setFileInput2] = useState(null);\n//   const [filenames, setFilenames] = useState([]);\n\n\n//   const handleFileChange1 = (event) => {\n//     setFileInput1(event.target.files);\n//   };\n  \n//   const handleFileChange2 = (event) => {\n//     setFileInput2(event.target.files);\n//   };\n\n//   const handleUpload = async () => {\n//     const formData = new FormData();\n//     for (let i = 0; i < fileInput1.length; i++) {\n//       formData.append(\"files1\", fileInput1[i]);\n//     }\n    \n//     for (let i = 0; i < fileInput2.length; i++) {\n//       formData.append(\"files2\", fileInput2[i]);\n//     }\n\n//     try {\n//       const response = await axios.post('http://localhost:5000/api/upload', formData); \n//       const responseData = response.data\n\n\n//       setFilenames([responseData.file1_name, responseData.file2_name]);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input type=\"file\" multiple onChange={handleFileChange1} />\n//       <input type=\"file\" multiple onChange={handleFileChange2} />\n//       <button onClick={handleUpload}>Upload</button>\n//       <ul>\n//         {filenames.map((filename, index) => (\n//           <li key={index}>{filename}</li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default FileUpload;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport subprocess from 'child_process';\n\nfunction FileUpload() {\n  const [fileInput1, setFileInput1] = useState(null);\n  const [fileInput2, setFileInput2] = useState(null);\n  const [filenames, setFilenames] = useState([]);\n  const [identical, setIdentical] = useState(\"\");\n\n  const handleFileChange1 = (event) => {\n    setFileInput1(event.target.files);\n  };\n  \n  const handleFileChange2 = (event) => {\n    setFileInput2(event.target.files);\n  };\n\n  const handleUpload = async () => {\n    const formData = new FormData();\n    for (let i = 0; i < fileInput1.length; i++) {\n      formData.append(\"files1\", fileInput1[i]);\n    }\n    \n    for (let i = 0; i < fileInput2.length; i++) {\n      formData.append(\"files2\", fileInput2[i]);\n    }\n\n    try {\n      const response = await axios.post('http://localhost:5000/api/upload', formData); \n      const responseData = response.data\n\n      setFilenames([responseData.file1_name, responseData.file2_name]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    if (filenames.length === 2) {\n      const [file1, file2] = filenames;\n      const result = subprocess.execSync(`cksum ${file1} ${file2}`).toString();\n      const [file1Checksum, file2Checksum] = result.split(\"\\n\").map(line => line.split(\" \")[0]);\n      if (file1Checksum === file2Checksum) {\n        setIdentical(\"Files are identical\");\n      } else {\n        setIdentical(\"Files are not identical\");\n      }\n    }\n  }, [filenames]);\n\n  return (\n    <div>\n      <input type=\"file\" multiple onChange={handleFileChange1} />\n      <input type=\"file\" multiple onChange={handleFileChange2} />\n      <button onClick={handleUpload}>Upload</button>\n      <ul>\n        {filenames.map((filename, index) => (\n          <li key={index}>{filename}</li>\n        ))}\n      </ul>\n      {identical && <p>{identical}</p>}\n    </div>\n  );\n}\n\nexport default FileUpload;\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}